@using BlazorCopilot1.Services
@using BlazorCopilot1.Data
@using Microsoft.AspNetCore.Mvc;
@using System;
@using System.Diagnostics;
@using System.IO;
@inject IJSRuntime JSRuntime
@inject ChatService ChatService



<div id="scrollbox">
    @foreach (var item in _messages)
    {
        if (item.IsRequest) 
        {
            <div class="sent p-2 m-0 position-relative d-flex justify-content-end">
                <p class="">@item.Body</p>
            </div>
        }
        else 
        {
            <div class="received p-2 m-0 position-relative d-flex justify-content-start">
                <p class="">@item.Body</p>
            </div>
        }
    }
</div>
<hr />
@* <input type="file" id="cvInput" accept=".pdf" style="display: none;" onchange="HandleFileUpload(this)" />
<button class="btn btn-primary" @onclick="OpenFileUploadDialog">Upload your CV</button>
 *@
<InputFile OnChange="HandleFileUpload" accept=".pdf"/>




<EditForm Model="chatinput" OnValidSubmit="SubmitChat">
<textarea id="chattextarea" style="width: 500px; height: 80px;" @bind="@chatinput.Text" @oninput="@((ChangeEventArgs e) => updateTextArea(e))" />
</EditForm>


@code {

[ApiController]
[Microsoft.AspNetCore.Mvc.Route("[controller]")]
public class PythonController : ControllerBase
{
    [HttpPost("executeScript")]
    public IActionResult ExecuteScript()
    {
        try
        {
            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = "python3"; // or python3 depending on your setup
            start.Arguments = "/app/python_scripts/recommendation.py";
            start.UseShellExecute = false;
            start.RedirectStandardOutput = true;

            using (Process process = Process.Start(start))
            {
                using (StreamReader reader = process.StandardOutput)
                {
                    string result = reader.ReadToEnd();
                    Console.Write(result);
                }
            }

            return Ok("Script executed successfully.");
        }
        catch(Exception ex)
        {
            return StatusCode(500, $"Internal server error: {ex.Message}");
        }
    }
}

    private ChatInput chatinput = new();
    private List<Message> _messages = new();

    private async Task ClearChat()
    {
        _messages = new List<Message>();
    }

    private async Task SubmitChat()
    {
        Message tosend = new Message(chatinput.Text, true);
        _messages.Add(tosend);
        await JSRuntime.InvokeAsync<string>("UpdateScroll", "scrollbox");

        Message response = await ChatService.GetResponse(_messages);
        _messages.Add(response);
        await JSRuntime.InvokeAsync<string>("UpdateScroll", "scrollbox");

        chatinput.Text = "";
    }


    private void updateTextArea(ChangeEventArgs e)
    {
        chatinput.Text = e.Value!.ToString()!;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<string>("addSubmitOnEnter", "chattextarea");
            Message welcomeMessage = new Message("Hello and welcome to the Porsche AG Job Portal! 👋\n" +
            "I'm your personal assistant here to help you find the perfect job match based on your uploaded CV. Would you like to proceed with the following options?\n" +
            "\n1. Analyze My CV: Let's take a closer look at your uploaded CV and compare it with our current job openings\n" +
            "2. Browse Open Jobs: View a list of all current job openings at Porsche AG without CV analysis.\n" +
            "3. AI Consultation: Get personalized career advice and job recommendations from our advanced AI analysis. Ideal for those who are unsure about what roles to apply for!",
            false);
            _messages.Add(welcomeMessage);

            StateHasChanged();
        }
    }

private async Task HandleFileUpload(InputFileChangeEventArgs e)
{
    var file = e.GetMultipleFiles().FirstOrDefault();
    if (file != null)
    {
        using (var memoryStream = new MemoryStream())
        {
            await file.OpenReadStream().CopyToAsync(memoryStream);
            var fileData = memoryStream.ToArray();

            // Save the file locally in the Docker container
            var filePath = Path.Combine("/data/uploaded_files/", file.Name); 
            await File.WriteAllBytesAsync(filePath, fileData);
            Console.WriteLine($"File {file.Name} received and saved at {filePath}.");

            // Now, trigger the Python script
            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = "python3"; // or python3 depending on your setup
            start.Arguments = $"/app/python_scripts/recommendation.py {filePath}";
            start.UseShellExecute = false;
            start.RedirectStandardOutput = true;
            start.RedirectStandardError = true; // Capture error outputs

            Console.WriteLine($"Attempting to trigger Python script with {filePath} as argument.");

            string result = "";
            string errorOutput = "";
            using (Process process = Process.Start(start))
            {
                using (StreamReader reader = process.StandardOutput)
                {
                    result = reader.ReadToEnd();
                }
                
                using (StreamReader errorReader = process.StandardError)
                {
                    errorOutput = errorReader.ReadToEnd();
                }
            }

            if (!string.IsNullOrEmpty(errorOutput))
            {
                Console.WriteLine($"Error from Python script: {errorOutput}");
            }
            else
            {
                Console.WriteLine($"Python script output: {result}");
            }

            // Add a message to indicate the file was received and processed
            Message fileProcessedMessage = new Message($"File {file.Name} processed. Analyzing results...", true);
            _messages.Add(fileProcessedMessage);
            await JSRuntime.InvokeAsync<string>("UpdateScroll", "scrollbox");

            // Trigger the bot response based on the result from the Python script (or any other data you have).
Message botResponse = await ChatService.GetResponseAfterFileUpload(); 
_messages.Add(botResponse);
await JSRuntime.InvokeAsync<string>("UpdateScroll", "scrollbox");
        }
    }
}

    public class ChatInput
    {
        public ChatInput()
        {
            Text = "";
        }
        public string Text { get; set; }
    }

}


